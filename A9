Q1) Given an integer array and two integers L and R. Find the sum of elements between the
index L and index R. Note: Both L and R inclusive.
Solution:
#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter size of array: ";
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int l,r;
    cout<<"Enter start and end index upto which you have to find sum of elements: ";
    cin>>l>>r;
    int sum=0;
    for(int i=l;i<=r;i++){
        sum+=arr[i];
    }
    cout<<"Sum of elements between indexs l and r are: "<<sum<<endl;

}
---------------------------------------------------------------------------------------------------
Q2) There is a man going on a trek. The trek consists of n + 1 points at different altitudes. The
man starts his trek on point 0 with altitude equal 0. You are given an integer array height
of length n where height[i] is the net height in altitude between points i and i + 1 for all
(0 <= i < n). Return the highest altitude of a point.
Solution:
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cout<<"Enter number of elements: ";
    cin>>n;
    int arr[n];
    cout<<"Enter elements in an array: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int ans=0,height[n+1]={0};
    for(int i=1;i<n+1;i++){
        height[i]= height[i-1] + arr[i-1]; 
    }
    for(int i=0;i<n;i++){
        ans=max(ans,height[i]); 
    }
    cout<<ans;
}
-----------------------------------------------------------------------------------------------------
Q3) Given an integer array arr consisting of 0’s and 1’s only, return the max length of
sequence which contains equal numbers of 0 and 1.
Solution:
#include<bits/stdc++.h>
using namespace std;
int maxlen(int arr[],int n)
{
   unordered_map<int,int> m;
   int sum=0,max_len=0,end_ind=-1;
   for(int i=0;i<n;i++)
   {
    arr[i]=(arr[i]==0)?-1:1;
   }
   for(int i=0;i<n;i++)
   {
    sum+=arr[i];
    if(sum==0)
    {
        max_len=i+1;
        end_ind=i;
    }
    if(m.find(sum)!=m.end())
    {
        if(max_len < i-m[sum])
        {
            max_len=i-m[sum];
            end_ind=i;
        }
    }
    else
       m[sum]=i;
   }
   return max_len;
}
int main(){
    int n;
    cout<<"Enter size of elemets:";
    cin>>n;
    int arr[n];
    cout<<"Enter elements in an array: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<maxlen(arr,n);
}
------------------------------------------------------------------------------------------------------
Q4) Given an integer array arr, return the number of consecutive sequences(subarrays) with
odd sum.
Solution:
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int currSum=0,count=0;
    for(int i=0;i<n;i++)
    {
        currSum=0;
        for(int j=i;j<n;j++)
        {
            currSum+=arr[j];
            if(currSum%2!=0)
            {
                count++;
            }
        }
    }
    cout<<count;
}
------------------------------------------------------------------------------------------------------
Q5) Given an integer array arr, return an array ans such that ans[i] is equal to the product of
all the elements of arr except arr[i].
Solution:

## ONE WAY  --> this will not work if element is 0

#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter size of elemets:";
    cin>>n;
    int arr[n];
    cout<<"Enter elements in an array: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int mul=1,prod[n];
    for(int i=0;i<n;i++)
    {
        mul*=arr[i];
    }
    for(int i=0;i<n;i++)
    {
        if(mul==0)
        {
            prod[i]=0;
        }
        prod[i]=mul/arr[i];
    }
   
     for(int i=0;i<n;i++)
    {
         cout<<prod[i]<<" ";
    }
}

## ANOTHER WAY ---> OPTIMIZED
#include<iostream>
using namespace std;
int main(){
    int n;
    cout<<"Enter size of elemets:";
    cin>>n;
    int arr[n];
    cout<<"Enter elements in an array: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    if (n == 1) {
        cout << 0;
    }
    int left[n],right[n],prod[n],i, j;
    left[0] = 1;
    right[n - 1] = 1;

    for (i = 1; i < n; i++)
        left[i] = arr[i - 1] * left[i - 1];
 
    for (j = n - 2; j >= 0; j--)
        right[j] = arr[j + 1] * right[j + 1];
 
    for (i = 0; i < n; i++)
        prod[i] = left[i] * right[i];
 
    for (i = 0; i < n; i++)
        cout << prod[i] << " ";
 
  return 0;
}
------------------------------------------------------------------------------------------------------
Q6) Given an array of size ‘n’ (initially zero) and ‘q’ number of updates where in each update
we can increase the value of all index from index l to index r with value x and in the end
print all the numbers of the array.
Solution:
